server:
  port: 9091
  servlet:
    encoding:
      force: true
      charset: utf-8
      enabled: true

logging:
  level:
    com.laiyw.micro: debug

spring:
  profiles:
    active: dev
  application:
    name: order
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      # 初始连接数
      initial-size: 5
      # 最小连接池数量
      min-idle: 10
      # 最大连接池数量
      max-active: 20
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      # 配置一个连接在池中最大生存的时间，单位是毫秒
      max-evictable-idle-time-millis: 900000
      # 配置检测连接是否有效
      validation-query: select 1 from dual
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      aop-patterns: com.laiyw.micro.*.service.impl.*
      web-stat-filter:
        enabled: true
        profile-enable: true
        url-pattern: /*
      stat-view-servlet:
        reset-enable: true
        enabled: true
        # 设置白名单，不填则允许所有访问
        allow:
        url-pattern: /druid/*
        login-username: druid
        login-password: druid
      filter:
        stat:
          enabled: true
          log-slow-sql: true
          slow-sql-millis: 1000
          merge-sql: true
        wall:
          config:
            multi-statement-allow: true
  redis:
    lettuce:
      pool:
        enabled: true
        max-active: 8
        max-wait: -1ms
        max-idle: 8
        min-idle: 0
      shutdown-timeout: 100ms
  rabbitmq:
    addresses: localhost
    port: 5672
    username: guest
    password: guest
    virtual-host: /
    connection-timeout: 0
    requested-heartbeat: 60s
    # 设置此属性配置可以确保消息成功发送到交换器
    publisher-confirm-type: correlated
    # 必须设置为true，否则消息消息路由失败也无法触发Return回调
    publisher-returns: true
    listener:
      simple:
        acknowledge-mode: manual
        # 消费端监听个数（即@RabbitListener开启几个线程去处理数据），可在RabbitListener注解中配置单独使某个队列生效
        concurrency: 1
        # 消费端最大监听个数
        max-concurrency: 10
        # 消费端预取消息数量到本地内存
        prefetch: 30
        retry:
          #是否开启消费者重试
          enabled: false
          #最大重试次数
          max-attempts: 5
          #重试间隔时间（单位毫秒）
          initial-interval: 5000ms
          #重试最大时间间隔（单位毫秒）
          max-interval: 1200000ms
          #间隔时间乘子，间隔时间*乘子=下一次的间隔时间，最大不能超过设置的最大间隔时间
          multiplier: 2
  cloud:
    nacos:
      discovery:
        server-addr: ${spring.cloud.nacos.config.server-addr}
        namespace: ${spring.cloud.nacos.config.namespace}
    sentinel:
      enabled: true
      eager: true
      log:
        dir: logs/sentinel
      datasource:
        flow:
          nacos:
            server-addr: ${spring.cloud.nacos.config.server-addr}
            namespace: ${spring.cloud.nacos.config.namespace}
            group-id: SENTINEL_GROUP
            data-id: ${spring.application.name}-flow
            rule-type: flow
            data-type: json
          degrade:
            nacos:
              server-addr: ${spring.cloud.nacos.config.server-addr}
              namespace: ${spring.cloud.nacos.config.namespace}
              group-id: SENTINEL_GROUP
              data-id: ${spring.application.name}-degrade
              rule-type: degrade
              data-type: json
          param-flow:
            nacos:
              server-addr: ${spring.cloud.nacos.config.server-addr}
              namespace: ${spring.cloud.nacos.config.namespace}
              group-id: SENTINEL_GROUP
              data-id: ${spring.application.name}-param-flow
              rule-type: param-flow
              data-type: json
          authority:
            nacos:
              server-addr: ${spring.cloud.nacos.config.server-addr}
              namespace: ${spring.cloud.nacos.config.namespace}
              group-id: SENTINEL_GROUP
              data-id: ${spring.application.name}-authority
              rule-type: authority
              data-type: json
          system:
            nacos:
              server-addr: ${spring.cloud.nacos.config.server-addr}
              namespace: ${spring.cloud.nacos.config.namespace}
              group-id: SENTINEL_GROUP
              data-id: ${spring.application.name}-system
              rule-type: system
              data-type: json

# Mybatis
mybatis-plus:
  type-aliases-package: com.laiyw.micro.**.domain
  configuration:
    map-underscore-to-camel-case: true
    call-setters-on-nulls: true
  global-config:
    db-config:
      id-type: assign_id
    banner: true

# feign config
feign:
  compression:
    request:
      enabled: false
      mime-types: text/xml, application/xml, application/json
      min-request-size: 2048
    response:
      enabled: false
  httpclient:
    enabled: false
    connection-timeout: 2000
    max-connections: 200
  sentinel:
    enabled: true

# seata
seata:
  enabled: true
  enable-auto-data-source-proxy: true
  application-id: ${spring.application.name}
  tx-service-group: ${spring.application.name}_tx_group
  service:
    disable-global-transaction: false
    vgroup-mapping:
      ${spring.application.name}_tx_group: default
  config:
    type: nacos
    nacos:
      server-addr: ${spring.cloud.nacos.config.server-addr}
      namespace: ${spring.cloud.nacos.config.namespace}
      group: SEATA_GROUP
      data-id: seata-server
  registry:
    type: nacos
    nacos:
      cluster: default
      server-addr: ${spring.cloud.nacos.config.server-addr}
      namespace: ${spring.cloud.nacos.config.namespace}
      group: SEATA_GROUP
      application: seata-server